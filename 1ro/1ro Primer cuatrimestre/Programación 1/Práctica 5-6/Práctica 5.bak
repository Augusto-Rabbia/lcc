;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname |Práctica 5|) (read-case-sensitive #t) (teachpacks ((lib "image.rkt" "teachpack" "2htdp") (lib "universe.rkt" "teachpack" "2htdp"))) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ((lib "image.rkt" "teachpack" "2htdp") (lib "universe.rkt" "teachpack" "2htdp")) #f)))
;Práctica 5

;-----------
" "
"Ejercicio 1"
" "

(define (has-marcos? l)
  (cond [(empty? l) #false]
        [(equal? (first l) "Marcos") #true]
        [else (has-marcos? (rest l))]
        ))
(check-expect (has-marcos? (cons "Eugenia"
                                 (cons "Lucía"
                                       (cons "Dante"
                                             (cons "Federico"
                                                   (cons "Marcos"
                                                         (cons "Gabina"
                                                               (cons "Laura"
                                                                     (cons "Pamela" '()))))))))) #true)

(define (has-marcos?2 l)
  (if (member? "Marcos" l) #true #false))

(check-expect (has-marcos?2 (cons "Eugenia"
                                  (cons "Lucía"
                                        (cons "Dante"
                                              (cons "Federico"
                                                    (cons "Marcos"
                                                          (cons "Gabina"
                                                                (cons "Laura"
                                                                      (cons "Pamela" '()))))))))) #true)


;-----------
" "
"Ejercicio 9"
" "

(define (todos-verdaderos l)
  (if (member? #false l) #false #true))

(check-expect (todos-verdaderos (cons #true (cons #true (cons #true '())))) #true)
(check-expect (todos-verdaderos (cons #true (cons #false (cons #true '())))) #false)


(define (uno-verdadero l)
  (if (member? #true l) #true #false))

(check-expect (uno-verdadero (cons #true (cons #false (cons #false '())))) #true)
(check-expect (uno-verdadero (cons #false (cons #false (cons #false '())))) #false)


;-----------
" "
"Ejercicio 10"
" "

(define (cant-elementos l num)
  (cond [(empty? l) num]
        [(cons? l) (cant-elementos (rest l) (+ num 1))]))

(check-expect (cant-elementos (cons #true (cons #false (cons #false '()))) 0) 3)
(check-expect (cant-elementos (cons #false '()) 0) 1)

;-----------
" "
"Ejercicio 11"
" "
(define (promedio l num)
  (cond [(number? (cant-elementos l num)) (/ () num)
        [(empty? l) 0]
        [(cons? l) else



;-----------
" "
"Ejercicio 12"
" "

;(define (pares l)
;  (cond [(empty? l) #false]
;        [
























